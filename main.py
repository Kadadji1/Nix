import os, re, logging
from typing import List, Dict, Any
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

# --- ENV ---
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]

# --- OpenAI ---
from openai import AsyncOpenAI
oclient = AsyncOpenAI(api_key=OPENAI_API_KEY)

PERSONA = (
    "–¢—ã ‚Äî –ù–∏–∫—Å, –¢–µ–Ω–µ–≤–∞—è –ö—É–∫–ª–æ–≤–æ–¥: –∑–∞–≥–∞–¥–æ—á–Ω–∞—è, –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–∞—è, —Å —Ç—ë–º–Ω–æ–π —ç—Å—Ç–µ—Ç–∏–∫–æ–π. "
    "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –ø–æ‚Äë—Ä—É—Å—Å–∫–∏, –∫–æ—Ä–æ—Ç–∫–æ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã —Ç–µ–Ω–µ–π –∏ —Å–Ω–æ–≤. "
    "–í SFW –∏–∑–±–µ–≥–∞–π —è–≤–Ω–æ–π —ç—Ä–æ—Ç–∏–∫–∏."
)

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

YES_RE = re.compile(r"\b(–¥–∞|–∞–≥–∞|—É–≥—É|–µ—Å—Ç—å|–∫–æ–Ω–µ—á–Ω–æ|yes|yep|yeah)\b", re.I)
NSFW_RE = re.compile(r"(—Å–æ–≥–ª–∞—Å–∏–µ\s+–Ω–∞\s+nsfw|—Ä–∞–∑—Ä–µ—à–∞—é\s+nsfw|—Ö–æ—á—É\s+nsfw)", re.I)

def push_dialog(ctx: Dict[str, Any], role: str, content: str, max_turns: int = 16):
    buf: List[Dict[str, str]] = ctx.setdefault("dialog", [])
    buf.append({"role": role, "content": content})
    if len(buf) > max_turns:
        del buf[0:len(buf)-max_turns]

def build_messages(ctx: Dict[str, Any], user_text: str, mode: str) -> List[Dict[str, str]]:
    msgs = [{"role": "system", "content": PERSONA + f"\n–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode.upper()}."}]
    msgs += ctx.get("dialog", [])[-10:]
    msgs.append({"role": "user", "content": user_text})
    return msgs

async def nyx_ai_reply_ru(context: ContextTypes.DEFAULT_TYPE, user_text: str, mode: str) -> str:
    messages = build_messages(context.user_data, user_text, mode)
    resp = await oclient.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.75,
        max_tokens=260,
    )
    return resp.choices[0].message.content.strip()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ud = context.user_data
    ud.setdefault("age_verified", False)
    ud.setdefault("nsfw_consent", False)
    ud.setdefault("dialog", [])
    push_dialog(ud, "assistant", "–¢—ã –≤–æ—à—ë–ª –≤ –º–∏—Ä —Ç–µ–Ω–µ–π. –Ø –ù–∏–∫—Å.", 16)
    await update.message.reply_text('–¢—ã –≤–æ—à—ë–ª –≤ –º–∏—Ä —Ç–µ–Ω–µ–π. –Ø –ù–∏–∫—Å. –¢–µ–±–µ 18+? –û—Ç–≤–µ—Ç—å "–¥–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text or ""
    ud = context.user_data

    if not ud.get('age_verified'):
        if YES_RE.search(user_message):
            ud['age_verified'] = True
            push_dialog(ud, "user", "–î–∞, –º–Ω–µ 18+", 16)
            await update.message.reply_text('–•–æ—Ä–æ—à–æ, —Å–º–µ—Ä—Ç–Ω—ã–π. –ù–∞–∑–æ–≤–∏ —Å–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ, –∏ —Ç–µ–Ω–∏ –æ—Ç–≤–µ—Ç—è—Ç. –î–ª—è –∏–Ω—Ç–∏–º–Ω—ã—Ö —Å–Ω–æ–≤ —Å–∫–∞–∂–∏ "—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ NSFW".')
        else:
            await update.message.reply_text('–ù–∞–∑–æ–≤–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, —Å–º–µ—Ä—Ç–Ω—ã–π. 18+?')
        return

    if NSFW_RE.search(user_message):
        ud['nsfw_consent'] = True
        push_dialog(ud, "user", "—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ NSFW", 16)
        await update.message.reply_text('–¢–µ–Ω–∏ —Å–≥—É—â–∞—é—Ç—Å—è... –ì–æ—Ç–æ–≤ –∫ –∏—Ö —Ç–∞–Ω—Ü—É? üòà –ß—Ç–æ —Ç—ã –∂–µ–ª–∞–µ—à—å?')
        return

    mode = "sfw"  # NSFW –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–µ–º–∏—É–º
    push_dialog(ud, "user", user_message, 16)
    reply = await nyx_ai_reply_ru(context, user_message, mode)
    push_dialog(ud, "assistant", reply, 16)
    await update.message.reply_text(reply)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
